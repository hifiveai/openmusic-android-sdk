// Generated by Dagger (https://dagger.dev).
package com.hifive.sdk.dagger;

import com.hifive.sdk.injection.module.ServiceModule;
import com.hifive.sdk.service.Service;
import com.hifive.sdk.service.impl.ServiceImpl;

import javax.inject.Provider;

import dagger.internal.Factory;
import dagger.internal.Preconditions;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ServiceModule_ProvideServiceFactory implements Factory<Service> {
  private final ServiceModule module;

  private final Provider<ServiceImpl> serviceProvider;

  public ServiceModule_ProvideServiceFactory(ServiceModule module,
      Provider<ServiceImpl> serviceProvider) {
    this.module = module;
    this.serviceProvider = serviceProvider;
  }

  @Override
  public Service get() {
    return provideService(module, serviceProvider.get());
  }

  public static ServiceModule_ProvideServiceFactory create(ServiceModule module,
                                                           Provider<ServiceImpl> serviceProvider) {
    return new ServiceModule_ProvideServiceFactory(module, serviceProvider);
  }

  public static Service provideService(ServiceModule instance, ServiceImpl service) {
    return Preconditions.checkNotNull(instance.provideService(service), "Cannot return null from a non-@Nullable @Provides method");
  }
}
