Index: hifivesdk/src/main/java/com/hifive/sdk/dagger/ServiceModule_ProvideServiceFactory.java
===================================================================
--- hifivesdk/src/main/java/com/hifive/sdk/dagger/ServiceModule_ProvideServiceFactory.java	(revision 3f3c74ef26fb7498af7bc8c9784db1d492f31366)
+++ hifivesdk/src/main/java/com/hifive/sdk/dagger/ServiceModule_ProvideServiceFactory.java	(revision 3f3c74ef26fb7498af7bc8c9784db1d492f31366)
@@ -1,41 +0,0 @@
-// Generated by Dagger (https://dagger.dev).
-package com.hifive.sdk.dagger;
-
-import com.hifive.sdk.injection.module.ServiceModule;
-import com.hifive.sdk.service.Service;
-import com.hifive.sdk.service.impl.ServiceImpl;
-
-import javax.inject.Provider;
-
-import dagger.internal.Factory;
-import dagger.internal.Preconditions;
-
-@SuppressWarnings({
-    "unchecked",
-    "rawtypes"
-})
-public final class ServiceModule_ProvideServiceFactory implements Factory<Service> {
-  private final ServiceModule module;
-
-  private final Provider<ServiceImpl> serviceProvider;
-
-  public ServiceModule_ProvideServiceFactory(ServiceModule module,
-      Provider<ServiceImpl> serviceProvider) {
-    this.module = module;
-    this.serviceProvider = serviceProvider;
-  }
-
-  @Override
-  public Service get() {
-    return provideService(module, serviceProvider.get());
-  }
-
-  public static ServiceModule_ProvideServiceFactory create(ServiceModule module,
-                                                           Provider<ServiceImpl> serviceProvider) {
-    return new ServiceModule_ProvideServiceFactory(module, serviceProvider);
-  }
-
-  public static Service provideService(ServiceModule instance, ServiceImpl service) {
-    return Preconditions.checkNotNull(instance.provideService(service), "Cannot return null from a non-@Nullable @Provides method");
-  }
-}
Index: hifivesdk/src/main/java/com/hifive/sdk/dagger/DaggerServiceComponent.java
===================================================================
--- hifivesdk/src/main/java/com/hifive/sdk/dagger/DaggerServiceComponent.java	(revision 3f3c74ef26fb7498af7bc8c9784db1d492f31366)
+++ hifivesdk/src/main/java/com/hifive/sdk/dagger/DaggerServiceComponent.java	(revision 3f3c74ef26fb7498af7bc8c9784db1d492f31366)
@@ -1,70 +0,0 @@
-// Generated by Dagger (https://dagger.dev).
-package com.hifive.sdk.dagger;
-
-import com.hifive.sdk.controller.BaseController;
-import com.hifive.sdk.injection.component.ServiceComponent;
-import com.hifive.sdk.injection.module.ServiceModule;
-import com.hifive.sdk.repository.DataRepository;
-import com.hifive.sdk.service.Service;
-import com.hifive.sdk.service.impl.ServiceImpl;
-
-import dagger.internal.Preconditions;
-
-@SuppressWarnings({
-    "unchecked",
-    "rawtypes"
-})
-public final class DaggerServiceComponent implements ServiceComponent {
-  private final ServiceModule serviceModule;
-
-  private DaggerServiceComponent(ServiceModule serviceModuleParam) {
-    this.serviceModule = serviceModuleParam;
-  }
-
-  public static Builder builder() {
-    return new Builder();
-  }
-
-  public static ServiceComponent create() {
-    return new Builder().build();
-  }
-
-  private ServiceImpl getServiceImpl() {
-    return injectServiceImpl(ServiceImpl_Factory.newInstance());}
-
-  private Service getService() {
-    return ServiceModule_ProvideServiceFactory.provideService(serviceModule, getServiceImpl());}
-
-  @Override
-  public void inject(BaseController service) {
-    injectBaseController(service);}
-
-  private ServiceImpl injectServiceImpl(ServiceImpl instance) {
-    ServiceImpl_MembersInjector.injectDataRepository(instance, new DataRepository());
-    return instance;
-  }
-
-  private BaseController injectBaseController(BaseController instance) {
-    BaseController_MembersInjector.injectMService(instance, getService());
-    return instance;
-  }
-
-  public static final class Builder {
-    private ServiceModule serviceModule;
-
-    private Builder() {
-    }
-
-    public Builder serviceModule(ServiceModule serviceModule) {
-      this.serviceModule = Preconditions.checkNotNull(serviceModule);
-      return this;
-    }
-
-    public ServiceComponent build() {
-      if (serviceModule == null) {
-        this.serviceModule = new ServiceModule();
-      }
-      return new DaggerServiceComponent(serviceModule);
-    }
-  }
-}
Index: hifivesdk/src/main/java/com/hifive/sdk/dagger/ServiceImpl_Factory.java
===================================================================
--- hifivesdk/src/main/java/com/hifive/sdk/dagger/ServiceImpl_Factory.java	(revision 3f3c74ef26fb7498af7bc8c9784db1d492f31366)
+++ hifivesdk/src/main/java/com/hifive/sdk/dagger/ServiceImpl_Factory.java	(revision 3f3c74ef26fb7498af7bc8c9784db1d492f31366)
@@ -1,36 +0,0 @@
-// Generated by Dagger (https://dagger.dev).
-package com.hifive.sdk.dagger;
-
-import com.hifive.sdk.repository.DataRepository;
-import com.hifive.sdk.service.impl.ServiceImpl;
-
-import javax.inject.Provider;
-
-import dagger.internal.Factory;
-
-@SuppressWarnings({
-    "unchecked",
-    "rawtypes"
-})
-public final class ServiceImpl_Factory implements Factory<ServiceImpl> {
-  private final Provider<DataRepository> dataRepositoryProvider;
-
-  public ServiceImpl_Factory(Provider<DataRepository> dataRepositoryProvider) {
-    this.dataRepositoryProvider = dataRepositoryProvider;
-  }
-
-  @Override
-  public ServiceImpl get() {
-    ServiceImpl instance = new ServiceImpl();
-    ServiceImpl_MembersInjector.injectDataRepository(instance, dataRepositoryProvider.get());
-    return instance;
-  }
-
-  public static ServiceImpl_Factory create(Provider<DataRepository> dataRepositoryProvider) {
-    return new ServiceImpl_Factory(dataRepositoryProvider);
-  }
-
-  public static ServiceImpl newInstance() {
-    return new ServiceImpl();
-  }
-}
Index: hifivesdk/src/main/java/com/hifive/sdk/dagger/ServiceImpl_MembersInjector.java
===================================================================
--- hifivesdk/src/main/java/com/hifive/sdk/dagger/ServiceImpl_MembersInjector.java	(revision 3f3c74ef26fb7498af7bc8c9784db1d492f31366)
+++ hifivesdk/src/main/java/com/hifive/sdk/dagger/ServiceImpl_MembersInjector.java	(revision 3f3c74ef26fb7498af7bc8c9784db1d492f31366)
@@ -1,34 +0,0 @@
-// Generated by Dagger (https://dagger.dev).
-package com.hifive.sdk.dagger;
-
-import com.hifive.sdk.repository.DataRepository;
-import com.hifive.sdk.service.impl.ServiceImpl;
-
-import javax.inject.Provider;
-
-import dagger.MembersInjector;
-
-@SuppressWarnings({
-    "unchecked",
-    "rawtypes"
-})
-public final class ServiceImpl_MembersInjector implements MembersInjector<ServiceImpl> {
-  private final Provider<DataRepository> dataRepositoryProvider;
-
-  public ServiceImpl_MembersInjector(Provider<DataRepository> dataRepositoryProvider) {
-    this.dataRepositoryProvider = dataRepositoryProvider;
-  }
-
-  public static MembersInjector<ServiceImpl> create(
-      Provider<DataRepository> dataRepositoryProvider) {
-    return new ServiceImpl_MembersInjector(dataRepositoryProvider);}
-
-  @Override
-  public void injectMembers(ServiceImpl instance) {
-    injectDataRepository(instance, dataRepositoryProvider.get());
-  }
-
-  public static void injectDataRepository(ServiceImpl instance, DataRepository dataRepository) {
-    instance.dataRepository = dataRepository;
-  }
-}
Index: hifivesdk/src/main/java/com/hifive/sdk/injection/CustomScope.kt
===================================================================
--- hifivesdk/src/main/java/com/hifive/sdk/injection/CustomScope.kt	(revision 3f3c74ef26fb7498af7bc8c9784db1d492f31366)
+++ hifivesdk/src/main/java/com/hifive/sdk/injection/CustomScope.kt	(revision 3f3c74ef26fb7498af7bc8c9784db1d492f31366)
@@ -1,14 +0,0 @@
-package com.hifive.sdk.injection
-
-import java.lang.annotation.Documented
-import java.lang.annotation.Retention
-import java.lang.annotation.RetentionPolicy.RUNTIME
-import javax.inject.Scope
-
-/**
- * @author Dsh  on 2018/4/16.
- */
-@Scope
-@Documented
-@Retention(RUNTIME)
-annotation class CustomScope
\ No newline at end of file
Index: hifivesdk/src/main/java/com/hifive/sdk/dagger/DataRepository_Factory.java
===================================================================
--- hifivesdk/src/main/java/com/hifive/sdk/dagger/DataRepository_Factory.java	(revision 3f3c74ef26fb7498af7bc8c9784db1d492f31366)
+++ hifivesdk/src/main/java/com/hifive/sdk/dagger/DataRepository_Factory.java	(revision 3f3c74ef26fb7498af7bc8c9784db1d492f31366)
@@ -1,27 +0,0 @@
-// Generated by Dagger (https://dagger.dev).
-package com.hifive.sdk.dagger;
-
-import com.hifive.sdk.repository.DataRepository;
-
-import dagger.internal.Factory;
-
-@SuppressWarnings({
-    "unchecked",
-    "rawtypes"
-})
-public final class DataRepository_Factory implements Factory<DataRepository> {
-  private static final DataRepository_Factory INSTANCE = new DataRepository_Factory();
-
-  @Override
-  public DataRepository get() {
-    return new DataRepository();
-  }
-
-  public static DataRepository_Factory create() {
-    return INSTANCE;
-  }
-
-  public static DataRepository newInstance() {
-    return new DataRepository();
-  }
-}
Index: hifivesdk/src/main/java/com/hifive/sdk/dagger/BaseController_MembersInjector.java
===================================================================
--- hifivesdk/src/main/java/com/hifive/sdk/dagger/BaseController_MembersInjector.java	(revision 3f3c74ef26fb7498af7bc8c9784db1d492f31366)
+++ hifivesdk/src/main/java/com/hifive/sdk/dagger/BaseController_MembersInjector.java	(revision 3f3c74ef26fb7498af7bc8c9784db1d492f31366)
@@ -1,33 +0,0 @@
-// Generated by Dagger (https://dagger.dev).
-package com.hifive.sdk.dagger;
-
-import com.hifive.sdk.controller.BaseController;
-import com.hifive.sdk.service.Service;
-
-import javax.inject.Provider;
-
-import dagger.MembersInjector;
-
-@SuppressWarnings({
-    "unchecked",
-    "rawtypes"
-})
-public final class BaseController_MembersInjector implements MembersInjector<BaseController> {
-  private final Provider<Service> mServiceProvider;
-
-  public BaseController_MembersInjector(Provider<Service> mServiceProvider) {
-    this.mServiceProvider = mServiceProvider;
-  }
-
-  public static MembersInjector<BaseController> create(Provider<Service> mServiceProvider) {
-    return new BaseController_MembersInjector(mServiceProvider);}
-
-  @Override
-  public void injectMembers(BaseController instance) {
-    injectMService(instance, mServiceProvider.get());
-  }
-
-  public static void injectMService(BaseController instance, Service mService) {
-    instance.mService = mService;
-  }
-}
Index: hifivesdk/src/main/java/com/hifive/sdk/injection/component/ServiceComponent.kt
===================================================================
--- hifivesdk/src/main/java/com/hifive/sdk/injection/component/ServiceComponent.kt	(revision 3f3c74ef26fb7498af7bc8c9784db1d492f31366)
+++ hifivesdk/src/main/java/com/hifive/sdk/injection/component/ServiceComponent.kt	(revision 3f3c74ef26fb7498af7bc8c9784db1d492f31366)
@@ -1,17 +0,0 @@
-package com.hifive.sdk.injection.component
-
-import com.hifive.sdk.injection.CustomScope
-import com.hifive.sdk.injection.module.ServiceModule
-import com.hifive.sdk.controller.BaseController
-import dagger.Component
-
-/**
- * @author Dsh  imkobedroid@gmail.com
- * @date 2019-07-09
- */
-
-@CustomScope
-@Component(modules = [ServiceModule::class])
-interface ServiceComponent {
-    fun inject(service: BaseController)
-}
\ No newline at end of file
Index: hifivesdk/src/main/java/com/hifive/sdk/injection/module/ServiceModule.kt
===================================================================
--- hifivesdk/src/main/java/com/hifive/sdk/injection/module/ServiceModule.kt	(revision 3f3c74ef26fb7498af7bc8c9784db1d492f31366)
+++ hifivesdk/src/main/java/com/hifive/sdk/injection/module/ServiceModule.kt	(revision 3f3c74ef26fb7498af7bc8c9784db1d492f31366)
@@ -1,19 +0,0 @@
-package com.hifive.sdk.injection.module
-
-import com.hifive.sdk.service.Service
-import com.hifive.sdk.service.impl.ServiceImpl
-import dagger.Module
-import dagger.Provides
-
-/**
- * @author Dsh  imkobedroid@gmail.com
- * @date 2019-07-09
- */
-
-@Module
-class ServiceModule {
-    @Provides
-    fun provideService(service: ServiceImpl): Service {
-        return service
-    }
-}
\ No newline at end of file
Index: hifivesdk/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.library'\r\napply from: \"config.gradle\"\r\napply plugin: 'kotlin-android'\r\napply plugin: 'kotlin-android-extensions'\r\n\r\n\r\n\r\nandroid {\r\n    compileSdkVersion HiFiveVersion.compileSdkVersion\r\n    defaultConfig {\r\n        minSdkVersion HiFiveVersion.minSdkVersion\r\n        targetSdkVersion HiFiveVersion.targetSdkVersion\r\n        versionCode HiFiveVersion.versionCode\r\n        versionName HiFiveVersion.versionName\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n\r\n}\r\n\r\ndependencies {\r\n    api fileTree(include: ['*.jar'], dir: 'libs')\r\n    api \"androidx.appcompat:appcompat:$HiFiveVersion.appCompat\"\r\n    api \"junit:junit:$HiFiveVersion.junit\"\r\n    api \"androidx.test:runner:$HiFiveVersion.runner\"\r\n    api \"androidx.test.espresso:espresso-core:$HiFiveVersion.espresso\"\r\n\r\n    //打包进sdk的库\r\n    implementation files('libs/dagger-2.23.2.jar')\r\n    implementation files('libs/downFile.jar')\r\n    //开发者必须导入的包\r\n    api HifiveDependencies[\"javax\"]\r\n    api HifiveDependencies[\"rxKotlin\"]\r\n    api HifiveDependencies[\"rxjava\"]\r\n    api HifiveDependencies[\"rxandroid\"]\r\n    api HifiveDependencies[\"retrofit\"]\r\n    api HifiveDependencies[\"retrofit-converter-gson\"]\r\n    api HifiveDependencies[\"retrofit-adapter-rxjava2\"]\r\n    api HifiveDependencies[\"okhttp\"]\r\n    api HifiveDependencies[\"okhttp-logging-interceptor\"]\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- hifivesdk/build.gradle	(revision 3f3c74ef26fb7498af7bc8c9784db1d492f31366)
+++ hifivesdk/build.gradle	(date 1606787534319)
@@ -26,17 +26,8 @@
 
 dependencies {
     api fileTree(include: ['*.jar'], dir: 'libs')
-    api "androidx.appcompat:appcompat:$HiFiveVersion.appCompat"
-    api "junit:junit:$HiFiveVersion.junit"
-    api "androidx.test:runner:$HiFiveVersion.runner"
-    api "androidx.test.espresso:espresso-core:$HiFiveVersion.espresso"
 
-    //打包进sdk的库
-    implementation files('libs/dagger-2.23.2.jar')
-    implementation files('libs/downFile.jar')
     //开发者必须导入的包
-    api HifiveDependencies["javax"]
-    api HifiveDependencies["rxKotlin"]
     api HifiveDependencies["rxjava"]
     api HifiveDependencies["rxandroid"]
     api HifiveDependencies["retrofit"]
Index: hifivesdk/src/main/java/com/hifive/sdk/service/impl/ServiceImpl.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.hifive.sdk.service.impl\r\n\r\nimport com.hifive.sdk.ext.convert\r\nimport com.hifive.sdk.repository.DataRepository\r\nimport com.hifive.sdk.service.Service\r\nimport io.reactivex.Flowable\r\nimport javax.inject.Inject\r\n\r\n/**\r\n * @author Dsh  imkobedroid@gmail.com\r\n * @date 2019-07-09\r\n */\r\nclass ServiceImpl @Inject constructor() : Service {\r\n\r\n\r\n    @Inject\r\n    lateinit var dataRepository: DataRepository\r\n\r\n    override fun getCompanySheetTagList(): Flowable<Any> {\r\n        return dataRepository.getCompanySheetTagList().convert()\r\n    }\r\n\r\n    override fun getCompanySheetList(groupId: String?,\r\n                                     language: String?,\r\n                                     recNam: String?,\r\n                                     type: String?,\r\n                                     tagIdList: String?,\r\n                                     field: String?,\r\n                                     pageSize: String?,\r\n                                     page: String?): Flowable<Any> {\r\n        return dataRepository.getCompanySheetList(groupId, language, recNam, type, tagIdList, field, pageSize, page).convert()\r\n    }\r\n\r\n    override fun getCompanySheetMusicList(sheetId: String?,\r\n                                          language: String?,\r\n                                          field: String?,\r\n                                          pageSize: String?,\r\n                                          page: String?): Flowable<Any> {\r\n        return dataRepository.getCompanySheetMusicList(sheetId, language, field, pageSize, page).convert()\r\n    }\r\n\r\n    override fun getCompanySheetMusicAll(sheetId: String?,\r\n                                          language: String?,\r\n                                          field: String?): Flowable<Any> {\r\n        return dataRepository.getCompanySheetMusicAll(sheetId, language, field).convert()\r\n    }\r\n\r\n    override fun getCompanyChannelList(): Flowable<Any> {\r\n        return dataRepository.getCompanyChannelList().convert()\r\n    }\r\n\r\n    override fun token(sign: String,\r\n                       appId: String,\r\n                       memberName: String,\r\n                       memberId: String,\r\n                       societyName: String?,\r\n                       societyId: String?,\r\n                       deviceId: String,\r\n                       timestamp: String,\r\n                       headerUrl: String?,\r\n                       gender: String?,\r\n                       birthday: String?,\r\n                       location: String?,\r\n                       favoriteSinger: String?,\r\n                       phone: String?): Flowable<Any> {\r\n        return dataRepository.token(sign, appId, memberName, memberId, societyName, societyId, deviceId, timestamp, headerUrl, gender, birthday, location, favoriteSinger, phone).convert()\r\n    }\r\n\r\n\r\n    override fun societyLogin(sign: String, appId: String, societyName: String, societyId: String, deviceId: String, timestamp: String): Flowable<Any> {\r\n        return dataRepository.societyLogin(sign, appId, societyName, societyId, deviceId, timestamp).convert()\r\n\r\n    }\r\n\r\n    override fun unbindMember(\r\n            memberId: String, societyId: String): Flowable<Any> {\r\n        return dataRepository.unbindingMember(memberId, societyId).convert()\r\n\r\n    }\r\n\r\n    override fun bind(\r\n\r\n            memberId: String,\r\n            societyId: String\r\n    ): Flowable<Any> {\r\n        return dataRepository.bind(memberId, societyId).convert()\r\n    }\r\n\r\n    override fun delete(\r\n\r\n            memberId: String\r\n    ): Flowable<Any> {\r\n        return dataRepository.delete(memberId).convert()\r\n    }\r\n\r\n\r\n    override fun deleteSociety(\r\n            societyId: String\r\n    ): Flowable<Any> {\r\n        return dataRepository.deleteSociety(societyId).convert()\r\n    }\r\n\r\n    override fun getMemberSheetList(page: String?, pageSize: String?): Flowable<Any> {\r\n        return dataRepository.getMemberSheetList(page, pageSize).convert()\r\n\r\n    }\r\n\r\n    override fun getMemberSheetMusicList(sheetId: String, language: String?, field: String?, pageSize: String?, page: String?): Flowable<Any> {\r\n        return dataRepository.getMemberSheetMusicList(sheetId, language, field, pageSize, page).convert()\r\n\r\n    }\r\n\r\n    override fun getMusicDetail(musicId: String, language: String?, mediaType: String, audioFormat: String?, audioRate: String?, field: String?): Flowable<Any> {\r\n        return dataRepository.getMusicDetail(musicId, language, mediaType, audioFormat, audioRate, field).convert()\r\n\r\n    }\r\n\r\n    override fun saveMemberSheet(sheetName: String): Flowable<Any> {\r\n        return dataRepository.saveMemberSheet(sheetName).convert()\r\n\r\n    }\r\n\r\n    override fun saveMemberSheetMusic(sheetId: String, musicId: String): Flowable<Any> {\r\n        return dataRepository.saveMemberSheetMusic(sheetId, musicId).convert()\r\n\r\n    }\r\n\r\n    override fun deleteMemberSheetMusic(sheetId: String, musicId: String): Flowable<Any> {\r\n        return dataRepository.deleteMemberSheetMusic(sheetId, musicId).convert()\r\n\r\n    }\r\n\r\n    override fun updateMusicRecord(recordId: String, duration: String, mediaType: String): Flowable<Any> {\r\n        return dataRepository.updateMusicRecord(recordId, duration, mediaType).convert()\r\n\r\n    }\r\n\r\n    override fun getConfigList(): Flowable<Any> {\r\n        return dataRepository.getConfigList().convert()\r\n    }\r\n\r\n    override fun getMusicList(searchId: String, keyword: String?, language: String?, field: String?, pageSize: String?, page: String?): Flowable<Any> {\r\n        return dataRepository.getMusicList(searchId, keyword, language, field, pageSize, page).convert()\r\n    }\r\n\r\n    override fun getSearchRecordList(pageSize: String?, page: String?): Flowable<Any> {\r\n        return dataRepository.getSearchRecordList(pageSize, page).convert()\r\n\r\n    }\r\n\r\n    override fun deleteSearchRecord(): Flowable<Any> {\r\n        return dataRepository.deleteSearchRecord().convert()\r\n\r\n    }\r\n\r\n    override fun getMemberSheetMusicAll(sheetId: String, language: String?, field: String?): Flowable<Any> {\r\n        return dataRepository.getMemberSheetMusicAll(sheetId, language, field).convert()\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- hifivesdk/src/main/java/com/hifive/sdk/service/impl/ServiceImpl.kt	(revision 3f3c74ef26fb7498af7bc8c9784db1d492f31366)
+++ hifivesdk/src/main/java/com/hifive/sdk/service/impl/ServiceImpl.kt	(date 1606716032274)
@@ -4,17 +4,14 @@
 import com.hifive.sdk.repository.DataRepository
 import com.hifive.sdk.service.Service
 import io.reactivex.Flowable
-import javax.inject.Inject
 
 /**
  * @author Dsh  imkobedroid@gmail.com
  * @date 2019-07-09
  */
-class ServiceImpl @Inject constructor() : Service {
+class ServiceImpl constructor() : Service {
 
-
-    @Inject
-    lateinit var dataRepository: DataRepository
+    private val dataRepository by lazy { DataRepository() }
 
     override fun getCompanySheetTagList(): Flowable<Any> {
         return dataRepository.getCompanySheetTagList().convert()
Index: hifivesdk/src/main/java/com/hifive/sdk/controller/BaseController.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.hifive.sdk.controller\r\n\r\nimport android.content.Context\r\nimport com.hifive.sdk.hInterface.DataResponse\r\nimport com.hifive.sdk.hInterface.DownLoadResponse\r\nimport com.hifive.sdk.service.Service\r\nimport com.hifive.sdk.utils.NetWorkUtils\r\nimport javax.inject.Inject\r\n\r\n\r\n/**\r\n * @author Dsh  imkobedroid@gmail.com\r\n * @date 2019-07-09\r\n */\r\nabstract class BaseController {\r\n\r\n    @Inject\r\n    lateinit var mService: Service\r\n\r\n    fun checkNetWork(context: Context, info: DataResponse): Boolean {\r\n        if (NetWorkUtils.isNetWorkAvailable(context)) {\r\n            return true\r\n        }\r\n        info.errorMsg(\"网络错误\", null)\r\n        return false\r\n    }\r\n\r\n\r\n    /**\r\n     * 获取商户歌单标签列表\r\n     */\r\n    abstract fun getCompanySheetTagList(\r\n            context: Context,\r\n            response: DataResponse\r\n    )\r\n\r\n    /**\r\n     * 获取商户歌单列表\r\n     */\r\n    abstract fun getCompanySheetList(\r\n            context: Context,\r\n            groupId: String?,\r\n            language: String?,\r\n            recoNum: String?,\r\n            type: String?,\r\n            tagIdList: String?,\r\n            field: String?,\r\n            pageSize: String?,\r\n            page: String?,\r\n            response: DataResponse\r\n    )\r\n\r\n    /**\r\n     * 获取商户歌单歌曲列表\r\n     */\r\n    abstract fun getCompanySheetMusicList(\r\n            context: Context,\r\n            sheetId: String?,\r\n            language: String?,\r\n            field: String?,\r\n            pageSize: String?,\r\n            page: String?,\r\n            response: DataResponse\r\n    )\r\n\r\n    /**\r\n     * 获取商户歌单全部歌曲列表\r\n     */\r\n    abstract fun getCompanySheetMusicAll(\r\n            context: Context,\r\n            sheetId: String?,\r\n            language: String?,\r\n            field: String?,\r\n            response: DataResponse\r\n    )\r\n\r\n\r\n    /**\r\n     * 获取商户电台列表\r\n     */\r\n    abstract fun getCompanyChannelList(\r\n            context: Context,\r\n            response: DataResponse\r\n    )\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    abstract fun memberLogin(context: Context,\r\n                             memberName: String,\r\n                             memberId: String,\r\n                             societyName: String?,\r\n                             societyId: String?,\r\n                             headerUrl: String?,\r\n                             gender: String?,\r\n                             birthday: String?,\r\n                             location: String?,\r\n                             favoriteSinger: String?,\r\n                             phone: String?,\r\n                             dataResponse: DataResponse)\r\n\r\n\r\n    abstract fun societyLogin(\r\n            context: Context,\r\n            societyName: String,\r\n            societyId: String,\r\n            dataResponse: DataResponse)\r\n\r\n\r\n    abstract fun unbindingMember(\r\n            context: Context,\r\n            memberId: String,\r\n            societyId: String,\r\n            dataResponse: DataResponse\r\n    )\r\n\r\n\r\n    abstract fun bindingMember(\r\n            context: Context,\r\n            memberId: String,\r\n            societyId: String,\r\n            dataResponse: DataResponse\r\n    )\r\n\r\n\r\n    abstract fun deleteMember(\r\n            context: Context,\r\n            memberId: String,\r\n            dataResponse: DataResponse\r\n    )\r\n\r\n    abstract fun deleteSociety(\r\n            context: Context,\r\n            societyId: String,\r\n            dataResponse: DataResponse\r\n    )\r\n\r\n    abstract fun getMemberSheetList(\r\n            context: Context,\r\n            page: String?,\r\n            pageSize: String?,\r\n            dataResponse: DataResponse\r\n    )\r\n\r\n\r\n    abstract fun getMemberSheetMusicList(\r\n            context: Context,\r\n            sheetId: String,\r\n            language: String?,\r\n            field: String?,\r\n            pageSize: String?,\r\n            page: String?,\r\n            dataResponse: DataResponse\r\n    )\r\n\r\n\r\n    abstract fun getMusicDetail(\r\n            context: Context,\r\n            musicId: String, language: String?, mediaType: String,\r\n            audioFormat: String?, audioRate: String?, field: String?,\r\n            dataResponse: DataResponse\r\n    )\r\n\r\n\r\n    abstract fun saveMemberSheet(\r\n            context: Context,\r\n            sheetName: String,\r\n            dataResponse: DataResponse\r\n    )\r\n\r\n    abstract fun saveMemberSheetMusic(\r\n            context: Context,\r\n            sheetId: String,\r\n            musicId: String,\r\n            dataResponse: DataResponse\r\n    )\r\n\r\n\r\n    abstract fun deleteMemberSheetMusic(\r\n            context: Context,\r\n            sheetId: String,\r\n            musicId: String,\r\n            dataResponse: DataResponse\r\n    )\r\n\r\n\r\n    abstract fun updateMusicRecord(\r\n            context: Context,\r\n            recordId: String,\r\n            duration: String,\r\n            mediaType: String,\r\n            dataResponse: DataResponse\r\n    )\r\n\r\n\r\n    abstract fun getConfigList(\r\n            context: Context,\r\n            dataResponse: DataResponse\r\n    )\r\n\r\n\r\n    abstract fun getMusicList(\r\n            context: Context,\r\n            searchId: String,\r\n            keyword: String?,\r\n            language: String?,\r\n            field: String?,\r\n            pageSize: String?,\r\n            page: String?,\r\n            dataResponse: DataResponse\r\n    )\r\n\r\n    abstract fun getSearchRecordList(\r\n            context: Context,\r\n            pageSize: String?,\r\n            page: String?,\r\n            dataResponse: DataResponse\r\n    )\r\n\r\n\r\n    abstract fun deleteSearchRecord(\r\n            context: Context,\r\n            dataResponse: DataResponse\r\n    )\r\n\r\n\r\n    abstract fun getMemberSheetMusicAll(\r\n            context: Context,\r\n            sheetId: String,\r\n            language: String?,\r\n            field: String?,\r\n            dataResponse: DataResponse\r\n    )\r\n\r\n\r\n    abstract fun downLoadFile(\r\n            context: Context,\r\n            url: String,\r\n            path: String,\r\n            dataResponse: DownLoadResponse\r\n    )\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- hifivesdk/src/main/java/com/hifive/sdk/controller/BaseController.kt	(revision 3f3c74ef26fb7498af7bc8c9784db1d492f31366)
+++ hifivesdk/src/main/java/com/hifive/sdk/controller/BaseController.kt	(date 1606716032317)
@@ -4,8 +4,8 @@
 import com.hifive.sdk.hInterface.DataResponse
 import com.hifive.sdk.hInterface.DownLoadResponse
 import com.hifive.sdk.service.Service
+import com.hifive.sdk.service.impl.ServiceImpl
 import com.hifive.sdk.utils.NetWorkUtils
-import javax.inject.Inject
 
 
 /**
@@ -14,8 +14,7 @@
  */
 abstract class BaseController {
 
-    @Inject
-    lateinit var mService: Service
+    val mService by lazy { ServiceImpl() }
 
     fun checkNetWork(context: Context, info: DataResponse): Boolean {
         if (NetWorkUtils.isNetWorkAvailable(context)) {
Index: hifivesdk/src/main/java/com/hifive/sdk/controller/MusicManager.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.hifive.sdk.controller\r\n\r\nimport android.content.Context\r\nimport com.hifive.sdk.common.BaseConstance\r\nimport com.hifive.sdk.common.BaseConstance.Companion.memberOutId\r\nimport com.hifive.sdk.common.BaseConstance.Companion.societyOutId\r\nimport com.hifive.sdk.dagger.DaggerServiceComponent\r\nimport com.hifive.sdk.ext.request\r\nimport com.hifive.sdk.hInterface.DataResponse\r\nimport com.hifive.sdk.hInterface.DownLoadResponse\r\nimport com.hifive.sdk.injection.module.ServiceModule\r\nimport com.hifive.sdk.manager.HFLiveApi\r\nimport com.hifive.sdk.manager.HFLiveApi.Companion.APP_ID\r\nimport com.hifive.sdk.manager.HFLiveApi.Companion.SECRET\r\nimport com.hifive.sdk.net.Encryption\r\nimport com.hifive.sdk.rx.BaseSubscribe\r\nimport com.tsy.sdk.myokhttp.MyOkHttp\r\nimport com.tsy.sdk.myokhttp.response.DownloadResponseHandler\r\nimport okhttp3.OkHttpClient\r\nimport org.json.JSONObject\r\nimport java.io.File\r\nimport java.util.concurrent.TimeUnit\r\n\r\n\r\n/**\r\n * @author Dsh  imkobedroid@gmail.com\r\n * @date 2019-07-09\r\n */\r\nclass MusicManager(val context: Context) : BaseController() {\r\n\r\n\r\n    init {\r\n        DaggerServiceComponent.builder().serviceModule(ServiceModule()).build().inject(this)\r\n    }\r\n\r\n\r\n    override fun getCompanySheetTagList(\r\n            context: Context,\r\n            response: DataResponse\r\n    ) {\r\n        if (!checkNetWork(context, response)) {\r\n            return\r\n        }\r\n        mService.getCompanySheetTagList()\r\n                .request(object : BaseSubscribe<Any>(response) {\r\n                    override fun onNext(t: Any) {\r\n                        super.onNext(t)\r\n                    }\r\n                })\r\n    }\r\n\r\n\r\n    override fun getCompanySheetMusicAll(\r\n            context: Context,\r\n            sheetId: String?,\r\n            language: String?,\r\n            field: String?,\r\n            response: DataResponse\r\n    ) {\r\n        if (!checkNetWork(context, response)) {\r\n            return\r\n        }\r\n        mService.getCompanySheetMusicAll(sheetId, language, field)\r\n                .request(object : BaseSubscribe<Any>(response) {\r\n                    override fun onNext(t: Any) {\r\n                        super.onNext(t)\r\n                    }\r\n                })\r\n    }\r\n\r\n    override fun getCompanySheetMusicList(\r\n            context: Context,\r\n            sheetId: String?,\r\n            language: String?,\r\n            field: String?,\r\n            pageSize: String?,\r\n            page: String?,\r\n            response: DataResponse\r\n    ) {\r\n        if (!checkNetWork(context, response)) {\r\n            return\r\n        }\r\n        mService.getCompanySheetMusicList(sheetId, language, field, pageSize, page)\r\n                .request(object : BaseSubscribe<Any>(response) {\r\n                    override fun onNext(t: Any) {\r\n                        super.onNext(t)\r\n                    }\r\n                })\r\n    }\r\n\r\n    override fun getCompanyChannelList(\r\n            context: Context,\r\n            response: DataResponse\r\n    ) {\r\n        if (!checkNetWork(context, response)) {\r\n            return\r\n        }\r\n\r\n        mService.getCompanyChannelList()\r\n                .request(object : BaseSubscribe<Any>(response) {\r\n                    override fun onNext(t: Any) {\r\n                        super.onNext(t)\r\n                    }\r\n                })\r\n\r\n    }\r\n\r\n\r\n    override fun getCompanySheetList(\r\n            context: Context,\r\n            groupId: String?,\r\n            language: String?,\r\n            recoNum: String?,\r\n            type: String?,\r\n            tagIdList: String?,\r\n            field: String?,\r\n            pageSize: String?,\r\n            page: String?,\r\n            response: DataResponse\r\n    ) {\r\n        if (!checkNetWork(context, response)) {\r\n            return\r\n        }\r\n        mService.getCompanySheetList(groupId, language, recoNum, type, tagIdList, field, pageSize, page)\r\n                .request(object : BaseSubscribe<Any>(response) {\r\n                    override fun onNext(t: Any) {\r\n                        super.onNext(t)\r\n                    }\r\n                })\r\n    }\r\n\r\n\r\n    override fun memberLogin(context: Context, memberName: String, memberId: String, societyName: String?, societyId: String?, headerUrl: String?, gender: String?, birthday: String?, location: String?, favoriteSinger: String?, phone: String?, dataResponse: DataResponse) {\r\n\r\n        val time = System.currentTimeMillis().toString()\r\n        val deviceId = Encryption.requestDeviceId(context)\r\n        val message = APP_ID + memberId + deviceId + time\r\n        val sign = BaseConstance.getSign(SECRET!!, message)?.trim()\r\n        if (!checkNetWork(context, dataResponse)) {\r\n            return\r\n        }\r\n        mService.token(sign\r\n                ?: \"\", APP_ID\r\n                ?: \"\", memberName, memberId, societyName, societyId, deviceId, time, headerUrl, gender, birthday, location, favoriteSinger, phone)\r\n                .request(object : BaseSubscribe<Any>(dataResponse) {\r\n                    override fun onNext(t: Any) {\r\n                        memberOutId = memberId\r\n                        societyOutId = societyId\r\n                        val json = JSONObject(t.toString())\r\n                        val token = json.getString(\"accessToken\")\r\n                        BaseConstance.accessTokenMember = token ?: \"\"\r\n                        BaseConstance.accessTokenUnion = null\r\n                        dataResponse.data(HFLiveApi.gson.toJson(t))\r\n                    }\r\n                })\r\n    }\r\n\r\n\r\n    override fun societyLogin(context: Context, societyName: String, societyId: String, dataResponse: DataResponse) {\r\n\r\n        val deviceId = Encryption.requestDeviceId(context)\r\n        val time = System.currentTimeMillis().toString()\r\n        val message = APP_ID + societyId + deviceId + time\r\n        val sign = BaseConstance.getSign(SECRET!!, message)?.trim()\r\n        if (!checkNetWork(context, dataResponse)) {\r\n            return\r\n        }\r\n        mService.societyLogin(sign ?: \"\", APP_ID!!, societyName, societyId, deviceId, time)\r\n                .request(object : BaseSubscribe<Any>(dataResponse) {\r\n                    override fun onNext(t: Any) {\r\n                        memberOutId = null\r\n                        societyOutId = societyId\r\n                        BaseConstance.accessTokenMember = null\r\n                        val json = JSONObject(t.toString())\r\n                        val token = json.getString(\"accessToken\")\r\n                        BaseConstance.accessTokenUnion = token ?: \"\"\r\n                        dataResponse.data(HFLiveApi.gson.toJson(t))\r\n                    }\r\n                })\r\n    }\r\n\r\n    override fun unbindingMember(context: Context,\r\n                                 memberId: String, societyId: String, dataResponse: DataResponse) {\r\n        if (!checkNetWork(context, dataResponse)) {\r\n            return\r\n        }\r\n        mService.unbindMember(memberId, societyId)\r\n                .request(object : BaseSubscribe<Any>(dataResponse) {\r\n                    override fun onNext(t: Any) {\r\n                        super.onNext(t)\r\n                    }\r\n                })\r\n    }\r\n\r\n    override fun bindingMember(\r\n            context: Context,\r\n            memberId: String,\r\n            societyId: String,\r\n            dataResponse: DataResponse\r\n    ) {\r\n        if (!checkNetWork(context, dataResponse)) {\r\n            return\r\n        }\r\n        mService.bind(memberId, societyId)\r\n                .request(object : BaseSubscribe<Any>(dataResponse) {\r\n                    override fun onNext(t: Any) {\r\n                        super.onNext(t)\r\n                    }\r\n                })\r\n    }\r\n\r\n    override fun deleteMember(\r\n            context: Context,\r\n            memberId: String,\r\n            dataResponse: DataResponse\r\n    ) {\r\n        if (!checkNetWork(context, dataResponse)) {\r\n            return\r\n        }\r\n        mService.delete(memberId)\r\n                .request(object : BaseSubscribe<Any>(dataResponse) {\r\n                    override fun onNext(t: Any) {\r\n                        super.onNext(t)\r\n                    }\r\n                })\r\n    }\r\n\r\n    override fun deleteSociety(\r\n            context: Context,\r\n            societyId: String,\r\n            dataResponse: DataResponse\r\n    ) {\r\n        if (!checkNetWork(context, dataResponse)) {\r\n            return\r\n        }\r\n        mService.deleteSociety(societyId)\r\n                .request(object : BaseSubscribe<Any>(dataResponse) {\r\n                    override fun onNext(t: Any) {\r\n                        super.onNext(t)\r\n                    }\r\n                })\r\n    }\r\n\r\n    override fun getMemberSheetList(context: Context, page: String?, pageSize: String?, dataResponse: DataResponse) {\r\n        if (!checkNetWork(context, dataResponse)) {\r\n            return\r\n        }\r\n        mService.getMemberSheetList(page, pageSize)\r\n                .request(object : BaseSubscribe<Any>(dataResponse) {\r\n                    override fun onNext(t: Any) {\r\n                        super.onNext(t)\r\n                    }\r\n                })\r\n    }\r\n\r\n    override fun getMemberSheetMusicList(context: Context, sheetId: String, language: String?, field: String?, pageSize: String?, page: String?, dataResponse: DataResponse) {\r\n        if (!checkNetWork(context, dataResponse)) {\r\n            return\r\n        }\r\n        mService.getMemberSheetMusicList(sheetId, language, field, pageSize, page)\r\n                .request(object : BaseSubscribe<Any>(dataResponse) {\r\n                    override fun onNext(t: Any) {\r\n                        super.onNext(t)\r\n                    }\r\n                })\r\n    }\r\n\r\n    override fun getMusicDetail(context: Context, musicId: String, language: String?, mediaType: String, audioFormat: String?, audioRate: String?, field: String?, dataResponse: DataResponse) {\r\n        if (!checkNetWork(context, dataResponse)) {\r\n            return\r\n        }\r\n        mService.getMusicDetail(musicId, language, mediaType, audioFormat, audioRate, field)\r\n                .request(object : BaseSubscribe<Any>(dataResponse) {\r\n                    override fun onNext(t: Any) {\r\n                        super.onNext(t)\r\n                    }\r\n                })\r\n    }\r\n\r\n    override fun saveMemberSheet(context: Context, sheetName: String, dataResponse: DataResponse) {\r\n        if (!checkNetWork(context, dataResponse)) {\r\n            return\r\n        }\r\n        mService.saveMemberSheet(sheetName)\r\n                .request(object : BaseSubscribe<Any>(dataResponse) {\r\n                    override fun onNext(t: Any) {\r\n                        super.onNext(t)\r\n                    }\r\n                })\r\n    }\r\n\r\n\r\n    override fun saveMemberSheetMusic(context: Context, sheetId: String, musicId: String, dataResponse: DataResponse) {\r\n        if (!checkNetWork(context, dataResponse)) {\r\n            return\r\n        }\r\n        mService.saveMemberSheetMusic(sheetId, musicId)\r\n                .request(object : BaseSubscribe<Any>(dataResponse) {\r\n                    override fun onNext(t: Any) {\r\n                        super.onNext(t)\r\n                    }\r\n                })\r\n    }\r\n\r\n    override fun deleteMemberSheetMusic(context: Context, sheetId: String, musicId: String, dataResponse: DataResponse) {\r\n        if (!checkNetWork(context, dataResponse)) {\r\n            return\r\n        }\r\n        mService.deleteMemberSheetMusic(sheetId, musicId)\r\n                .request(object : BaseSubscribe<Any>(dataResponse) {\r\n                    override fun onNext(t: Any) {\r\n                        super.onNext(t)\r\n                    }\r\n                })\r\n    }\r\n\r\n    override fun updateMusicRecord(context: Context, recordId: String, duration: String, mediaType: String, dataResponse: DataResponse) {\r\n        if (!checkNetWork(context, dataResponse)) {\r\n            return\r\n        }\r\n        mService.updateMusicRecord(recordId, duration, mediaType)\r\n                .request(object : BaseSubscribe<Any>(dataResponse) {\r\n                    override fun onNext(t: Any) {\r\n                        super.onNext(t)\r\n                    }\r\n                })\r\n    }\r\n\r\n    override fun getConfigList(context: Context, dataResponse: DataResponse) {\r\n        if (!checkNetWork(context, dataResponse)) {\r\n            return\r\n        }\r\n        mService.getConfigList()\r\n                .request(object : BaseSubscribe<Any>(dataResponse) {\r\n                    override fun onNext(t: Any) {\r\n                        super.onNext(t)\r\n                    }\r\n                })\r\n    }\r\n\r\n    override fun getMusicList(context: Context, searchId: String, keyword: String?, language: String?, field: String?, pageSize: String?, page: String?, dataResponse: DataResponse) {\r\n        if (!checkNetWork(context, dataResponse)) {\r\n            return\r\n        }\r\n        mService.getMusicList(searchId, keyword, language, field, pageSize, page)\r\n                .request(object : BaseSubscribe<Any>(dataResponse) {\r\n                    override fun onNext(t: Any) {\r\n                        super.onNext(t)\r\n                    }\r\n                })\r\n    }\r\n\r\n    override fun getSearchRecordList(context: Context, pageSize: String?, page: String?, dataResponse: DataResponse) {\r\n        if (!checkNetWork(context, dataResponse)) {\r\n            return\r\n        }\r\n        mService.getSearchRecordList(pageSize, page)\r\n                .request(object : BaseSubscribe<Any>(dataResponse) {\r\n                    override fun onNext(t: Any) {\r\n                        super.onNext(t)\r\n                    }\r\n                })\r\n    }\r\n\r\n    override fun deleteSearchRecord(context: Context, dataResponse: DataResponse) {\r\n        if (!checkNetWork(context, dataResponse)) {\r\n            return\r\n        }\r\n        mService.deleteSearchRecord()\r\n                .request(object : BaseSubscribe<Any>(dataResponse) {\r\n                    override fun onNext(t: Any) {\r\n                        super.onNext(t)\r\n                    }\r\n                })\r\n    }\r\n\r\n    override fun getMemberSheetMusicAll(context: Context, sheetId: String, language: String?, field: String?, dataResponse: DataResponse) {\r\n        if (!checkNetWork(context, dataResponse)) {\r\n            return\r\n        }\r\n        mService.getMemberSheetMusicAll(sheetId, language, field)\r\n                .request(object : BaseSubscribe<Any>(dataResponse) {\r\n                    override fun onNext(t: Any) {\r\n                        super.onNext(t)\r\n                    }\r\n                })\r\n    }\r\n\r\n\r\n    override fun downLoadFile(context: Context, url: String,\r\n                              path: String, dataResponse: DownLoadResponse) {\r\n        val down by lazy {\r\n            val okHttpClient = OkHttpClient.Builder()\r\n                    .connectTimeout(10000L, TimeUnit.MILLISECONDS)\r\n                    .readTimeout(10000L, TimeUnit.MILLISECONDS)\r\n                    .build()\r\n            MyOkHttp(okHttpClient)\r\n        }\r\n\r\n        down.download()\r\n                .url(url)\r\n                .filePath(path)\r\n                .tag(this)\r\n                .enqueue(object : DownloadResponseHandler() {\r\n                    override fun onStart(totalBytes: Long) {\r\n                        dataResponse.size(totalBytes);\r\n                    }\r\n\r\n                    override fun onFinish(downloadFile: File) {\r\n                        dataResponse.succeed(downloadFile)\r\n                    }\r\n\r\n                    override fun onProgress(currentBytes: Long, totalBytes: Long) {\r\n                        dataResponse.progress(currentBytes, totalBytes)\r\n                    }\r\n\r\n                    override fun onFailure(error_msg: String) {\r\n                        dataResponse.fail(error_msg)\r\n                    }\r\n                })\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- hifivesdk/src/main/java/com/hifive/sdk/controller/MusicManager.kt	(revision 3f3c74ef26fb7498af7bc8c9784db1d492f31366)
+++ hifivesdk/src/main/java/com/hifive/sdk/controller/MusicManager.kt	(date 1606715566833)
@@ -4,11 +4,9 @@
 import com.hifive.sdk.common.BaseConstance
 import com.hifive.sdk.common.BaseConstance.Companion.memberOutId
 import com.hifive.sdk.common.BaseConstance.Companion.societyOutId
-import com.hifive.sdk.dagger.DaggerServiceComponent
 import com.hifive.sdk.ext.request
 import com.hifive.sdk.hInterface.DataResponse
 import com.hifive.sdk.hInterface.DownLoadResponse
-import com.hifive.sdk.injection.module.ServiceModule
 import com.hifive.sdk.manager.HFLiveApi
 import com.hifive.sdk.manager.HFLiveApi.Companion.APP_ID
 import com.hifive.sdk.manager.HFLiveApi.Companion.SECRET
@@ -29,11 +27,6 @@
 class MusicManager(val context: Context) : BaseController() {
 
 
-    init {
-        DaggerServiceComponent.builder().serviceModule(ServiceModule()).build().inject(this)
-    }
-
-
     override fun getCompanySheetTagList(
             context: Context,
             response: DataResponse
